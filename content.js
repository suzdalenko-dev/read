let content = [
    {
        id: 0,
        title: "¬øPor qu√© la vivienda y el alquiler son tan caros en Espa√±a? Una bomba social en plena cuenta atr√°s",
        preview: "/assets/img/0-0.webp",
        content: `En Espa√±a, encontrar una vivienda digna a un precio razonable se ha convertido en una aut√©ntica odisea. 
                    Comprar un piso o incluso alquilar uno, especialmente en las grandes ciudades, se ha transformado en un lujo que muchos no pueden permitirse. ¬øPero por qu√©? ¬øQu√© nos ha llevado hasta aqu√≠? 
                    ¬øY, lo m√°s importante, qu√© demonios se puede hacer al respecto?
                    <br><br><img src="/assets/img/0-1.webp" alt="Pol√≠ticos ciegos, pueblo ahogado" class="img-fluid" /><br><br>
                    <h4>#1. El ladrillo como refugio para el ahorro</h4>
                    <br>
                    En un pa√≠s donde los bancos no ofrecen pr√°cticamente rentabilidad por los ahorros y la cultura del ahorro tradicional sigue muy viva, ¬øqu√© hace la gente cuando tiene dinero? Lo mete en ladrillo. Comprar una vivienda se ha convertido en una de las pocas formas de "guardar" valor, de protegerse del futuro, y de paso, alquilarla o venderla m√°s adelante con beneficios. Y esto no es algo que ocurra solo a nivel nacional.
                    <br><br>
                    <h4>#2. Espa√±a, para√≠so del comprador extranjero</h4>
                    <br>
                    Espa√±a se ha convertido en el destino ideal para extranjeros con alto poder adquisitivo. Desde alemanes, brit√°nicos o franceses hasta fondos de inversi√≥n internacionales que ven en nuestras ciudades y costas una oportunidad dorada. ¬øConsecuencia directa? Aumenta la presi√≥n sobre los precios, y el espa√±ol medio, con su sueldo congelado y su bolsillo cada vez m√°s exprimido, simplemente no puede competir. Con esto no pretendo decir que hay que prohibir comprar las viviendas a un inverson extranjero, si no simplemente es un punto m√°s que hay que tener en cuenta. Y el problema principal en esta cuestion esta que en el que el "comprador nacional" no puede competir con el "comprador extranjero" pricisamente por el bajo poder adquisitivo del "comprador nacional". 
                    <br><br>
                    <h4>#3. La inseguridad jur√≠dica y la plaga de la ocupaci√≥n</h4>
                    <br>
                    Y aqu√≠ viene lo m√°s sangrante: la inseguridad. ¬øQu√© propietario se anima a alquilar si sabe que, si le ocupan el piso, tendr√° que armarse de paciencia, dinero y abogados durante meses (o a√±os) para recuperarlo? Es absurdo. El gobierno, en vez de proteger a quien ha trabajado toda su vida para comprarse una casa, parece premiar al ocupa. S√≠, has le√≠do bien: m√°s derechos para el que entra a la fuerza que para el leg√≠timo due√±o. Resultado: miles y miles de viviendas cerradas a cal y canto. Y eso, evidentemente, reduce la oferta y dispara el precio del alquiler.
                    <br><br>
                    <h4>4. El nivel adquisitivo bajo y el infierno fiscal espa√±ol</h4>
                    <br>
                    Sumemos a todo esto unos salarios miserables y una carga fiscal que da miedo. Pagamos impuestos como si vivi√©ramos en Suiza, pero los servicios p√∫blicos, en muchos casos, rozan la chapuza. No hay vivienda p√∫blica suficiente, ni medidas reales para incentivar el alquiler, ni ayudas que lleguen a quien realmente las necesita. Lo que s√≠ hay es burocracia, papeleo, y p√©rdida de tiempo.
                    <br><img src="/assets/img/0-2.webp" alt="¬øPropietario o reh√©n?" class="img-fluid" /><br><br>
                    <h4>5. Las ‚Äúayudas al alquiler‚Äù: otra tomadura de pelo</h4>
                    Se llenan la boca hablando de ‚Äúayudas al alquiler‚Äù. Pero cuando rascas un poco ves el chiste: limitadas por edad, por mil requisitos, gestionadas por oficinas que cuestan millones en sueldos, electricidad y mantenimiento. Y mientras tanto, para financiar estas ayudas, te crujen a impuestos a ti, que trabajas, que pagas, que cumples. Es decir, primero te dejan sin dinero y luego te venden la limosna como si fuera un favor.
                    <br><br>
                    Y a√∫n hay m√°s: la gente tiene que dar vueltas presentando documentos, perdiendo d√≠as de trabajo o haciendo colas infinitas. ¬øY al final? Ni siquiera est√° garantizado que la ayuda llegue. Cuando se hace el c√°lculo global, lo que se ha gastado para dar esas ayudas supera con creces el beneficio real. Un sinsentido.
                    <br><br>   
                    <h3>¬øQu√© se puede hacer?</h3>
                    S√≠, hay soluciones. No son f√°ciles, no son r√°pidas, pero son reales.
                    <br><br>
                    ‚úÖ Desahucio expr√©s y polic√≠a local que sirva para algo
                    Basta ya de premiar al que ocupa. Si alguien irrumpe en tu propiedad, el proceso deber√≠a ser simple: una llamada a la polic√≠a local y desalojo inmediato. Punto. Porque esa misma polic√≠a, que cuesta un dineral a los contribuyentes, est√° muchas veces dando vueltas por el pueblo sin m√°s. Que al menos sirva para algo √∫til: proteger al ciudadano honesto.
                    <br><br>
                    ‚úÖ Seguridad jur√≠dica para el propietario = m√°s oferta = alquileres m√°s bajos
                    Si se garantiza que el propietario no va a perder su casa por alquilarla, habr√° m√°s viviendas en el mercado. Y como en cualquier mercado, cuando hay m√°s oferta, bajan los precios. Es tan sencillo como eso.
                    <br><br>
                    ‚úÖ Menos impuestos, m√°s poder adquisitivo
                    Si bajamos la presi√≥n fiscal sobre los trabajadores, si dejamos de asfixiar a la clase media, la gente tendr√° m√°s dinero en el bolsillo. Y si hay m√°s dinero, hay m√°s consumo, m√°s movimiento, m√°s econom√≠a real. Pero claro, eso requiere trabajo serio, no propaganda de saldo.
                    <br><br>
                    ‚úÖ Revitalizar la Espa√±a vaciada
                    No todo el mundo quiere vivir en Madrid o Barcelona. Pero tampoco se puede vivir en un pueblo donde no hay m√©dicos, ni internet, ni oportunidades. Invertir en la Espa√±a rural ser√≠a una medida de largo plazo, pero real. No fotos para Twitter, sino escuelas, centros de salud, transporte. Vida, en definitiva.
                    <br><br>
                    <h3>Conclusi√≥n: basta de parches, hace falta visi√≥n</h3>
                    Lo que vemos hoy en el mercado inmobiliario espa√±ol es el resultado de a√±os de decisiones mal tomadas, de mirar para otro lado, de contentarse con medidas in√∫tiles. Hay que proteger al que cumple, al que trabaja, al que se esfuerza. Hay que dejarse de ideolog√≠a barata y actuar con sentido com√∫n.
                    <br><br>
                    Porque si seguimos as√≠, el futuro no traer√° ni vivienda, ni alquileres asequibles, ni dignidad para el ciudadano. Solo m√°s frustraci√≥n, m√°s desigualdad‚Ä¶ y m√°s ocupas.
                    <br><br>
                    <h3>‚ùå Y lo peor: una clase pol√≠tica inepta, ciega y completamente desconectada de la realidad</h3>
                    <br><br>
                    Pero si hay algo que agrava esta situaci√≥n todav√≠a m√°s es el nivel lamentable de nuestra clase pol√≠tica. Ineptos, ciegos y, con perd√≥n, gilipollas. En vez de estar centrados en solucionar los problemas reales que afectan a millones de espa√±oles ‚Äîcomo el precio de la vivienda, los sueldos rid√≠culos o la falta de oportunidades‚Äî est√°n m√°s preocupados por cambiar el lenguaje, inventar g√©neros nuevos o montar debates est√©riles sobre ‚Äúelles‚Äù, ‚Äúellxs‚Äù y dem√°s tonter√≠as de sal√≥n.
                    <br><br>
                    ¬øSoluciones reales? Cero. ¬øPol√≠ticas que de verdad impacten en la vida de la gente? Nada. Solo postureo, propaganda y una desconexi√≥n total de lo que pasa en la calle. Mientras tanto, siguen trayendo a Espa√±a a gente    que muchas veces no comparte ni respeta los valores de Europa, ni de nuestra sociedad, ni de nuestra convivencia. Y no contentos con eso, meten ruido con ideolog√≠as extremas, con teor√≠as absurdas sobre identidad, mientras la gente aqu√≠ no puede ni pagar un alquiler digno.
                    <br><br>
                    En resumen: est√°n haciendo cualquier cosa menos lo que tienen que hacer. Son incapaces de gestionar, de priorizar, de tener un m√≠nimo de sentido com√∫n. Mientras tanto, t√∫, yo, y la mayor√≠a, seguimos pagando la fiesta.
                    <br><br>
                    <h3>üï∞Ô∏è Es la hora de cambiar las cosas</h3>
                    Ya est√° bien. Ya va siendo hora de despertar. De exigir soluciones reales, no parches. De dejar de votar al que promete humo y empezar a apoyar a quien defienda con hechos la dignidad de vivir en Espa√±a. Hay que devolver la seguridad al propietario, mejorar el poder adquisitivo del ciudadano, y dejar de lado las ideolog√≠as baratas que solo distraen del verdadero desastre que tenemos encima.
                    <br><br>
                    Porque si no lo hacemos nosotros, no lo va a hacer nadie.
                    <br>
                    Porque merecemos un pa√≠s donde vivir no sea un lujo.
                    <br>
                    Porque ya toca que Espa√±a funcione para los que trabajan, para los que se esfuerzan, para los que la sostienen cada d√≠a.
                    `,
        slug:"Por-qu√©-la-vivienda-y-el-alquiler-son-tan-caros-en-Espa√±a",
        tags: ["Social", "Alquiler", "Vivienda"],
        date: "23/03/2025",
        description: "El problema de la vivienda en Espa√±a no se resolver√° con medidas superficiales ni con ideolog√≠as vac√≠as. Es necesario un cambio real en la gesti√≥n pol√≠tica, con soluciones pr√°cticas que protejan a quienes trabajan y contribuyen al pa√≠s. Sin acci√≥n efectiva, la situaci√≥n solo empeorar√°, aumentando la desigualdad y la frustraci√≥n de los ciudadanos."
    },
     {
        id: 1,
        title: "Inteligencia Artificial en JavaScript",
        preview: "https://suzdalenko-dev.github.io/ia/img/1-3.png",
        content: `<p>
                    La inteligencia artificial (IA) se ha convertido en una de las tecnolog√≠as m√°s innovadoras del desarrollo de software moderno.
                    Pero, ¬øc√≥mo funciona realmente una red neuronal desde adentro? Para comprenderlo paso a paso, vamos a crear una red neuronal muy b√°sica
                    usando solo JavaScript puro ‚Äîsin bibliotecas externas.
                    </p>

                    <h4>#1. Ejemplo b√°sico: Una neurona artificial en JavaScript</h4>

                    <p>
                        Una neurona artificial es la unidad fundamental de una red neuronal. Su comportamiento puede modelarse usando tres componentes esenciales:
                    </p>

                    <ul>
                      <li><strong>üìå Pesos (Weights):</strong>Los pesos determinan la influencia de cada entrada en la neurona. Son valores num√©ricos que multiplican las entradas. <br>
                          üëâ Ejemplo: <br>
                          Si tienes una entrada x = 0.3 y un peso w=0.8, el resultado ponderado ser√°: <br>
                          x √ó w = 0.3 √ó 0.8 = 0.24 <br>
                          Un peso alto significa que la entrada tiene m√°s impacto en la salida de la neurona. <br>
                      </li>
                      <li><strong>üìå 2. Sesgo (Bias):</strong> El sesgo es un n√∫mero que se suma al c√°lculo final de la neurona. Permite desplazar la funci√≥n de activaci√≥n para que la neurona pueda responder mejor a diferentes casos. <br>
                          üëâ Ejemplo: <br>
                          Si la salida ponderada es 0.24 y el sesgo es 0.1, entonces: <br>
                          0.24 + 0.1 = 0.34 <br>
                          El sesgo ayuda a la neurona a no depender exclusivamente de las entradas y a tomar decisiones m√°s flexibles. <br>
                      </li>
                      <li><strong>üìå 3. Funci√≥n de activaci√≥n:</strong> Esta funci√≥n decide si la neurona se "activa" o no. En este caso, usaremos un umbral simple: <br>
                          Si¬†el¬†valor¬†es¬†menor¬†que¬†0.5,¬†la¬†neurona¬†devuelve¬†0;¬†de¬†lo¬†contrario,¬†devuelve¬†1. <br>
                          function activation(x) { return x < 0.5 ? 0 : 1; } <br><br>
                      </li>
                    </ul>
                    <img src="https://suzdalenko-dev.github.io/ia/img/0-1.png" alt="Perceptr√≥n" class="img-fluid" /><br><br>
                        
                    <p><strong>ü§ñ C√≥digo: Perceptr√≥n en JavaScript (con explicaci√≥n)</strong></p>
                    <div class="vscode-header">perceptron.js</div>
                    <div class="vscode-editor">
                    <code>
                    <span class="comment">// Clase que representa una neurona artificial tipo Perceptr√≥n</span><br>
                    <span class="keyword">class</span> <span class="variable">Perceptron</span> {<br><br>
                    &nbsp;&nbsp;<span class="comment">// Constructor: inicializa el peso, el sesgo y la tasa de aprendizaje</span><br>
                    &nbsp;&nbsp;<span class="method">constructor</span>() {<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">// Peso (Weight): determina cu√°nta influencia tiene la entrada</span><br>
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">weight</span> = <span class="method">Math</span>.<span class="method">random</span>();<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">// Sesgo (Bias): permite desplazar la funci√≥n de activaci√≥n</span><br>
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">bias</span> = <span class="method">Math</span>.<span class="method">random</span>();<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">// Learning rate: controla la velocidad de aprendizaje</span><br>
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">learningRate</span> = <span class="number">0.1</span>;<br>
                    &nbsp;&nbsp;}<br><br>
                    &nbsp;&nbsp;<span class="comment">// Funci√≥n de activaci√≥n:</span><br>
                    &nbsp;&nbsp;<span class="comment">// Devuelve 1 si la suma ponderada supera el umbral (0.5), 0 en caso contrario</span><br>
                    &nbsp;&nbsp;<span class="method">activation</span>(<span class="variable">x</span>) {<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span> <span class="variable">x</span> &gt; <span class="number">0.5</span> ? <span class="number">1</span> : <span class="number">0</span>;<br>
                    &nbsp;&nbsp;}<br><br>
                    &nbsp;&nbsp;<span class="comment">// Predicci√≥n: calcula la salida del perceptr√≥n</span><br>
                    &nbsp;&nbsp;<span class="comment">// Suma ponderada: input * peso + sesgo</span><br>
                    &nbsp;&nbsp;<span class="method">predict</span>(<span class="variable">input</span>) {<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">let</span> <span class="variable">sum</span> = <span class="variable">input</span> * <span class="keyword">this</span>.<span class="variable">weight</span> + <span class="keyword">this</span>.<span class="variable">bias</span>;<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span> <span class="keyword">this</span>.<span class="method">activation</span>(<span class="variable">sum</span>);<br>
                    &nbsp;&nbsp;}<br><br>
                    &nbsp;&nbsp;<span class="comment">// Entrenamiento: ajusta peso y sesgo durante 200 √©pocas</span><br>
                    &nbsp;&nbsp;<span class="method">train</span>(<span class="variable">inputs</span>, <span class="variable">labels</span>, <span class="variable">epochs</span> = <span class="number">200</span>) {<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">i</span> = <span class="number">0</span>; <span class="variable">i</span> &lt; <span class="variable">epochs</span>; <span class="variable">i</span>++) {<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">j</span> = <span class="number">0</span>; <span class="variable">j</span> &lt; <span class="variable">inputs</span>.<span class="method">length</span>; <span class="variable">j</span>++) {<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">let</span> <span class="variable">prediction</span> = <span class="keyword">this</span>.<span class="method">predict</span>(<span class="variable">inputs</span>[<span class="variable">j</span>]);<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">let</span> <span class="variable">error</span> = <span class="variable">labels</span>[<span class="variable">j</span>] - <span class="variable">prediction</span>;<br><br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">// Ajuste del peso y del sesgo basado en el error</span><br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">weight</span> += <span class="variable">error</span> * <span class="variable">inputs</span>[<span class="variable">j</span>] * <span class="keyword">this</span>.<span class="variable">learningRate</span>;<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">bias</span> += <span class="variable">error</span> * <span class="keyword">this</span>.<span class="variable">learningRate</span>;<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;}<br>
                    &nbsp;&nbsp;}<br>
                    }<br><br>
                    <span class="comment">// Crear y entrenar el perceptr√≥n</span><br>
                    <span class="keyword">let</span> <span class="variable">perceptron</span> = <span class="keyword">new</span> <span class="variable">Perceptron</span>();<br><br>
                    <span class="comment">// Entrenamos con datos: menores a 0.5 = 0, mayores o iguales = 1</span><br>
                    <span class="keyword">let</span> <span class="variable">trainingInputs</span> = [<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.333</span>, <span class="number">0.4</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">0.9</span>];<br>
                    <span class="keyword">let</span> <span class="variable">trainingLabels</span> = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>];<br><br>
                    <span class="variable">perceptron</span>.<span class="method">train</span>(<span class="variable">trainingInputs</span>, <span class="variable">trainingLabels</span>);<br><br>
                    <span class="comment">// Probamos el perceptr√≥n</span><br>
                    <span class="variable">console</span>.<span class="method">log</span>(<span class="string">"Predicci√≥n para 0.3:"</span>, <span class="variable">perceptron</span>.<span class="method">predict</span>(<span class="number">0.3</span>));<br>
                    <span class="variable">console</span>.<span class="method">log</span>(<span class="string">"Predicci√≥n para 0.7:"</span>, <span class="variable">perceptron</span>.<span class="method">predict</span>(<span class="number">0.7</span>));<br><br>
                    <span class="comment">// Mostrar los pesos aprendidos</span><br>
                    <span class="variable">console</span>.<span class="method">log</span>(<span class="string">"Peso:"</span>, <span class="variable">perceptron</span>.<span class="variable">weight</span>);<br>
                    <span class="variable">console</span>.<span class="method">log</span>(<span class="string">"Sesgo:"</span>, <span class="variable">perceptron</span>.<span class="variable">bias</span>);
                      </code>
                    </div>

         <br>            
        <p>
          Resultado de la ejecuci√≥n del c√≥digo anterior:
        </p>
        <iframe width="100%" height="111px" src="https://suzdalenko-dev.github.io/ia/0.js/0.html" title="Inteligencia Artificial en JavaScript"></iframe>            
         <p>
          Este c√≥digo nos muestra c√≥mo funciona la inteligencia artificial utilizando una sola neurona artificial, llamada perceptr√≥n.<br><br>
          Primero, se entrena con ejemplos de entrada como 0.1, 0.2, 0.333, 0.4, 0.5, 0.8, y 0.9, junto con sus resultados esperados: [0, 0, 0, 0, 1, 1, 1].
          A partir de estos datos, la IA ajusta autom√°ticamente los pesos y el sesgo para aprender a distinguir entre valores bajos (0) y altos (1).<br><br>
          Una vez entrenado, podemos darle nuevos valores como 0.3 y 0.7, y el perceptr√≥n nos devolver√° predicciones razonables, en este caso 0 para el valor bajo y 1 para el alto.
        </p>            
        <p>
          Un lector curioso podr√≠a preguntarse:
        </p>            
        <p>
          <strong>"¬øY no ser√≠a m√°s f√°cil usar una simple comparaci√≥n como if (x < 0.5) return 0; else return 1 en lugar de todo este entrenamiento con bucles, ajustes de pesos y dem√°s?"
          </strong>
        </p>
        <p>
          Y justamente ah√≠ est√° lo interesante.
        </p>
        <p>
          El perceptr√≥n no se limita a hacer una comparaci√≥n est√°tica. Ajusta sus propios par√°metros (peso y sesgo) a partir de ejemplos reales. Aunque en el primer caso puede parecer que solo est√° imitando un if, en realidad est√° aprendiendo a generalizar una regla a partir de datos. Es decir, no le decimos directamente c√≥mo tomar decisiones, sino que las aprende por s√≠ mismo.
        </p>
        <p>
          <strong>¬ø Pero‚Ä¶ ¬øqu√© pasa cuando el problema no es tan simple ?</strong>
        </p>
        <p>
          Para entender por qu√© esto es importante, vamos a construir una red un poco m√°s avanzada. En este nuevo ejemplo usaremos 3 neuronas en la capa oculta (una para cada bit de entrada) y una neurona final que eval√∫a la salida combinada.
        </p>
        <p>
          Vamos ahora a ver un ejemplo en el que una simple condici√≥n if no es suficiente.
        </p>
        <p>
          En lugar de entradas individuales como 0.3 o 0.7, ahora trabajaremos con combinaciones binarias de tres valores. Esto genera una l√≥gica m√°s compleja, donde no basta con comparar un solo n√∫mero para tomar una decisi√≥n. Observa los siguientes ejemplos de entrenamiento: <br>
          000 ‚Üí resultado: 0  <br>
          001 ‚Üí resultado: 0  <br>
          010 ‚Üí resultado: 0  <br>
          100 ‚Üí resultado: 1  <br>
          110 ‚Üí resultado: 1  <br>
          111 ‚Üí resultado: 1  <br>
        </p>
        <p>
          Como puedes ver, no hay un solo valor que puedas comparar con un umbral para decidir entre 0 o 1. No podr√≠amos escribir simplemente if (x < 0.5) porque x ahora es un conjunto de bits, y la respuesta depende de c√≥mo interact√∫an entre ellos.
        </p>
        <h6>üß† ¬øC√≥mo lo resolvemos entonces?</h6>
        <p>
          Para este caso, vamos a construir una red neuronal multicapa: <br>
            üîπ Una primera capa compuesta por 3 neuronas, cada una especializada en uno de los bits de entrada. <br>
            üîπ Una segunda capa con una sola neurona de salida, que recibe las salidas de las 3 anteriores y toma la decisi√≥n final. <br>
            üîπ Y en lugar de una funci√≥n if, usamos una funci√≥n de activaci√≥n sigmoide: <br>
            <strong>return 1 / (1 + Math.exp(-x)); </strong><br>
            Esta funci√≥n es m√°s suave, permite valores intermedios entre 0 y 1, y hace que el aprendizaje sea mucho m√°s realista y √∫til.
        </p>
        <p>
          Con este enfoque, la red aprende a combinar patrones entre los distintos bits de entrada y a sacar conclusiones, incluso sobre datos que no ha visto nunca.
        </p>
        <p>
          Este tipo de arquitectura, aunque sencilla, es mucho m√°s poderosa que un if, porque representa la esencia de c√≥mo una inteligencia artificial aprende a pensar por s√≠ sola a partir de ejemplos.
        </p>

        <img src="https://suzdalenko-dev.github.io/ia/img/1-1.png" alt="Red neuronal de 3 neuronas" class="img-fluid" /><br><br>

        <p><strong>ü§ñ C√≥digo: Red neuronal multicapa en JavaScript (con explicaci√≥n)</strong></p>
        <div class="vscode-header">neurona.js</div>
        <div class="vscode-editor">
        <code>
        <span class="comment">// Datos de entrada y etiquetas</span><br>
        <span class="keyword">const</span> <span class="variable">inputs</span> = [<br>
        &nbsp;&nbsp;[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],<br>
        &nbsp;&nbsp;[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],<br>
        &nbsp;&nbsp;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],<br>
        &nbsp;&nbsp;[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],<br>
        &nbsp;&nbsp;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],<br>
        &nbsp;&nbsp;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]<br>
        ];<br>
        <span class="keyword">const</span> <span class="variable">labels</span> = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>];<br><br>
        <span class="comment">// Neurona individual con funci√≥n sigmoide</span><br>
        <span class="keyword">class</span> <span class="variable">Neurona</span> {<br>
        &nbsp;&nbsp;<span class="method">constructor</span>(<span class="variable">nombre</span> = <span class="string">""</span>) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">weight</span> = <span class="method">Math</span>.<span class="method">random</span>();<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">bias</span> = <span class="method">Math</span>.<span class="method">random</span>();<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">learningRate</span> = <span class="number">0.1</span>;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">nombre</span> = <span class="variable">nombre</span>;<br>
        &nbsp;&nbsp;}<br><br>
        &nbsp;&nbsp;<span class="method">activation</span>(<span class="variable">x</span>) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + <span class="method">Math</span>.<span class="method">exp</span>(-<span class="variable">x</span>));<br>
        &nbsp;&nbsp;}<br><br>
        &nbsp;&nbsp;<span class="method">raw</span>(<span class="variable">input</span>) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span> <span class="variable">input</span> * <span class="keyword">this</span>.<span class="variable">weight</span> + <span class="keyword">this</span>.<span class="variable">bias</span>;<br>
        &nbsp;&nbsp;}<br><br>
        &nbsp;&nbsp;<span class="method">predict</span>(<span class="variable">input</span>) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span> <span class="keyword">this</span>.<span class="method">activation</span>(<span class="keyword">this</span>.<span class="method">raw</span>(<span class="variable">input</span>));<br>
        &nbsp;&nbsp;}<br><br>
        &nbsp;&nbsp;<span class="method">train</span>(<span class="variable">inputs</span>, <span class="variable">labels</span>, <span class="variable">epochs</span> = <span class="number">10</span>) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">i</span> = <span class="number">0</span>; <span class="variable">i</span> &lt; <span class="variable">epochs</span>; <span class="variable">i</span>++) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">j</span> = <span class="number">0</span>; <span class="variable">j</span> &lt; <span class="variable">inputs</span>.<span class="method">length</span>; <span class="variable">j</span>++) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">let</span> <span class="variable">output</span> = <span class="keyword">this</span>.<span class="method">predict</span>(<span class="variable">inputs</span>[<span class="variable">j</span>]);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">let</span> <span class="variable">error</span> = <span class="variable">labels</span>[<span class="variable">j</span>] - <span class="variable">output</span>;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">let</span> <span class="variable">gradient</span> = <span class="variable">output</span> * (<span class="number">1</span> - <span class="variable">output</span>);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">weight</span> += <span class="variable">error</span> * <span class="variable">gradient</span> * <span class="variable">inputs</span>[<span class="variable">j</span>] * <span class="keyword">this</span>.<span class="variable">learningRate</span>;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">bias</span> += <span class="variable">error</span> * <span class="variable">gradient</span> * <span class="keyword">this</span>.<span class="variable">learningRate</span>;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
        &nbsp;&nbsp;&nbsp;&nbsp;}<br>
        &nbsp;&nbsp;}<br><br>
        &nbsp;&nbsp;<span class="method">info</span>() {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">console</span>.<span class="method">log</span>(<span class="keyword">this</span>.<span class="variable">nombre</span>);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">console</span>.<span class="method">log</span>(<span class="string">"  Peso:"</span>, <span class="keyword">this</span>.<span class="variable">weight</span>.<span class="method">toFixed</span>(<span class="number">3</span>));<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">console</span>.<span class="method">log</span>(<span class="string">"  Bias:"</span>, <span class="keyword">this</span>.<span class="variable">bias</span>.<span class="method">toFixed</span>(<span class="number">3</span>));<br>
        &nbsp;&nbsp;}<br>
        }<br>
        <span class="comment">// Clase que representa la neurona de salida con m√∫ltiples entradas</span><br>
        <span class="keyword">class</span> <span class="variable">NeuronaSalida</span> {<br>
        &nbsp;&nbsp;<span class="method">constructor</span>(<span class="variable">numEntradas</span>) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">// Inicializa pesos y bias aleatoriamente</span><br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">weights</span> = <span class="method">Array</span>.<span class="method">from</span>({ length: <span class="variable">numEntradas</span> }, () => <span class="method">Math</span>.<span class="method">random</span>());<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">bias</span> = <span class="method">Math</span>.<span class="method">random</span>();<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">learningRate</span> = <span class="number">0.1</span>;<br>
        &nbsp;&nbsp;}<br><br>
        &nbsp;&nbsp;<span class="comment">// Funci√≥n de activaci√≥n: sigmoide</span><br>
        &nbsp;&nbsp;<span class="method">activation</span>(<span class="variable">x</span>) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + <span class="method">Math</span>.<span class="method">exp</span>(-<span class="variable">x</span>));<br>
        &nbsp;&nbsp;}<br><br>
        &nbsp;&nbsp;<span class="comment">// Predicci√≥n a partir de salidas ocultas</span><br>
        &nbsp;&nbsp;<span class="method">predict</span>(<span class="variable">hiddenOutputs</span>) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">let</span> <span class="variable">sum</span> = <span class="variable">hiddenOutputs</span>.<span class="method">reduce</span>((<span class="variable">acc</span>, <span class="variable">h</span>, <span class="variable">i</span>) => <span class="variable">acc</span> + <span class="variable">h</span> * <span class="keyword">this</span>.<span class="variable">weights</span>[<span class="variable">i</span>], <span class="number">0</span>) + <span class="keyword">this</span>.<span class="variable">bias</span>;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span> <span class="keyword">this</span>.<span class="method">activation</span>(<span class="variable">sum</span>);<br>
        &nbsp;&nbsp;}<br><br>
        &nbsp;&nbsp;<span class="comment">// Entrenamiento de la neurona de salida</span><br>
        &nbsp;&nbsp;<span class="method">train</span>(<span class="variable">hiddenOutputsList</span>, <span class="variable">labels</span>, <span class="variable">epochs</span> = <span class="number">10</span>) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">epoch</span> = <span class="number">0</span>; <span class="variable">epoch</span> &lt; <span class="variable">epochs</span>; <span class="variable">epoch</span>++) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">i</span> = <span class="number">0</span>; <span class="variable">i</span> &lt; <span class="variable">hiddenOutputsList</span>.<span class="method">length</span>; <span class="variable">i</span>++) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">let</span> <span class="variable">output</span> = <span class="keyword">this</span>.<span class="method">predict</span>(<span class="variable">hiddenOutputsList</span>[<span class="variable">i</span>]);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">let</span> <span class="variable">error</span> = <span class="variable">labels</span>[<span class="variable">i</span>] - <span class="variable">output</span>;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">let</span> <span class="variable">gradient</span> = <span class="variable">output</span> * (<span class="number">1</span> - <span class="variable">output</span>);<br><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">// Ajustar los pesos</span><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable">j</span> = <span class="number">0</span>; <span class="variable">j</span> &lt; <span class="keyword">this</span>.<span class="variable">weights</span>.<span class="property">length</span>; <span class="variable">j</span>++) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">weights</span>[<span class="variable">j</span>] += <span class="variable">error</span> * <span class="variable">gradient</span> * <span class="variable">hiddenOutputsList</span>[<span class="variable">i</span>][<span class="variable">j</span>] * <span class="keyword">this</span>.<span class="variable">learningRate</span>;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">// Ajustar el sesgo</span><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span>.<span class="variable">bias</span> += <span class="variable">error</span> * <span class="variable">gradient</span> * <span class="keyword">this</span>.<span class="variable">learningRate</span>;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
        &nbsp;&nbsp;&nbsp;&nbsp;}<br>
        &nbsp;&nbsp;}<br><br>
        &nbsp;&nbsp;<span class="comment">// Mostrar informaci√≥n de la neurona</span><br>
        &nbsp;&nbsp;<span class="method">info</span>() {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="method">console</span>.<span class="method">log</span>(<span class="string">"‚öôÔ∏è Neurona de salida:"</span>);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="method">console</span>.<span class="method">log</span>(<span class="string">"  Pesos:"</span>, <span class="keyword">this</span>.<span class="variable">weights</span>.<span class="method">map</span>(<span class="variable">w</span> => <span class="variable">w</span>.<span class="method">toFixed</span>(<span class="number">3</span>)).<span class="method">join</span>(<span class="string">", "</span>));<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="method">console</span>.<span class="method">log</span>(<span class="string">"  Bias:"</span>, <span class="keyword">this</span>.<span class="variable">bias</span>.<span class="method">toFixed</span>(<span class="number">3</span>));<br>
        &nbsp;&nbsp;}<br>
        }<br><br>
        <span class="method">console</span>.<span class="method">log</span>(<span class="string">"üì• Datos de entrenamiento:"</span>);<br>
        <span class="variable">inputs</span>.<span class="method">forEach</span>((<span class="variable">input</span>, <span class="variable">i</span>) => {<br>
        &nbsp;&nbsp;<span class="method">console</span>.<span class="method">log</span>(<span class="string">  Input: [input.join(", ")}] ‚Üí Label: labels[i]}</span>);<br>
        });<br><br>
        <span class="comment">// Capa oculta con 3 neuronas (una por cada bit de entrada)</span><br>
        <span class="keyword">const</span> <span class="variable">oculta1</span> = <span class="keyword">new</span> <span class="class">Neurona</span>(<span class="string">"Oculta 1"</span>);<br>
        <span class="keyword">const</span> <span class="variable">oculta2</span> = <span class="keyword">new</span> <span class="class">Neurona</span>(<span class="string">"Oculta 2"</span>);<br>
        <span class="keyword">const</span> <span class="variable">oculta3</span> = <span class="keyword">new</span> <span class="class">Neurona</span>(<span class="string">"Oculta 3"</span>);<br><br>
        <span class="keyword">const</span> <span class="variable">entradasPorNeurona</span> = [<br>
        &nbsp;&nbsp;<span class="variable">inputs</span>.<span class="method">map</span>(<span class="variable">i</span> => <span class="variable">i</span>[<span class="number">0</span>]),<br>
        &nbsp;&nbsp;<span class="variable">inputs</span>.<span class="method">map</span>(<span class="variable">i</span> => <span class="variable">i</span>[<span class="number">1</span>]),<br>
        &nbsp;&nbsp;<span class="variable">inputs</span>.<span class="method">map</span>(<span class="variable">i</span> => <span class="variable">i</span>[<span class="number">2</span>])<br>
        ];<br><br>
        <span class="variable">oculta1</span>.<span class="method">train</span>(<span class="variable">entradasPorNeurona</span>[<span class="number">0</span>], <span class="variable">labels</span>, <span class="number">1000</span>);<br>
        <span class="variable">oculta2</span>.<span class="method">train</span>(<span class="variable">entradasPorNeurona</span>[<span class="number">1</span>], <span class="variable">labels</span>, <span class="number">1000</span>);<br>
        <span class="variable">oculta3</span>.<span class="method">train</span>(<span class="variable">entradasPorNeurona</span>[<span class="number">2</span>], <span class="variable">labels</span>, <span class="number">1000</span>);<br><br>
        <span class="keyword">const</span> <span class="variable">hiddenOutputs</span> = <span class="variable">inputs</span>.<span class="method">map</span>(<span class="variable">input</span> => [<br>
        &nbsp;&nbsp;<span class="variable">oculta1</span>.<span class="method">predict</span>(<span class="variable">input</span>[<span class="number">0</span>]),<br>
        &nbsp;&nbsp;<span class="variable">oculta2</span>.<span class="method">predict</span>(<span class="variable">input</span>[<span class="number">1</span>]),<br>
        &nbsp;&nbsp;<span class="variable">oculta3</span>.<span class="method">predict</span>(<span class="variable">input</span>[<span class="number">2</span>])<br>
        ]);<br><br>
        <span class="keyword">const</span> <span class="variable">salida</span> = <span class="keyword">new</span> <span class="class">NeuronaSalida</span>(<span class="number">3</span>);<br>
        <span class="variable">salida</span>.<span class="method">train</span>(<span class="variable">hiddenOutputs</span>, <span class="variable">labels</span>, <span class="number">1000</span>);<br><br>
        <span class="keyword">function</span> <span class="method">predecir</span>(<span class="variable">binArray</span>) {<br>
        &nbsp;&nbsp;<span class="keyword">const</span> <span class="variable">h1</span> = <span class="variable">oculta1</span>.<span class="method">predict</span>(<span class="variable">binArray</span>[<span class="number">0</span>]);<br>
        &nbsp;&nbsp;<span class="keyword">const</span> <span class="variable">h2</span> = <span class="variable">oculta2</span>.<span class="method">predict</span>(<span class="variable">binArray</span>[<span class="number">1</span>]);<br>
        &nbsp;&nbsp;<span class="keyword">const</span> <span class="variable">h3</span> = <span class="variable">oculta3</span>.<span class="method">predict</span>(<span class="variable">binArray</span>[<span class="number">2</span>]);<br>
        &nbsp;&nbsp;<span class="keyword">const</span> <span class="variable">output</span> = <span class="variable">salida</span>.<span class="method">predict</span>([<span class="variable">h1</span>, <span class="variable">h2</span>, <span class="variable">h3</span>]);<br>
        &nbsp;&nbsp;<span class="keyword">const</span> <span class="variable">clasificacion</span> = <span class="variable">output</span> &gt; <span class="number">0.5</span> ? <span class="number">1</span> : <span class="number">0</span>;<br>
        }<br><br>
        <span class="comment">// Pruebas con nuevos datos</span><br>
        <span class="method">console</span>.<span class="method">log</span>(<span class="string">"\nüß™ Pruebas con datos no vistos:"</span>);<br>
        <span class="method">predecir</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]); <span class="comment">// 011</span><br>
        <span class="method">predecir</span>([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]); <span class="comment">// 101</span><br><br>
        <span class="comment">// Info de las neuronas</span><br>
        <span class="method">console</span>.<span class="method">log</span>(<span class="string">"\n‚ÑπÔ∏è Pesos y sesgos finales:"</span>);<br>
        <span class="variable">oculta1</span>.<span class="method">info</span>();<br>
        <span class="variable">oculta2</span>.<span class="method">info</span>();<br>
        <span class="variable">oculta3</span>.<span class="method">info</span>();<br>
        <span class="variable">salida</span>.<span class="method">info</span>();<br>
        </code>
        </div>
        <p>
          Resultado de la ejecuci√≥n del c√≥digo anterior:
        </p>
        <iframe width="100%" height="411px" src="https://suzdalenko-dev.github.io/ia/0.js/1.html" title="Inteligencia Artificial en JavaScript"></iframe>   
        <p>
          üìä Resultados del entrenamiento y prueba de la red neuronal:
          <br>
          Despu√©s de entrenar nuestra red neuronal en JavaScript con los siguientes datos:
          Input: [0, 0, 0] ‚Üí resultado: 0  <br>
          Input: [0, 0, 1] ‚Üí resultado: 0  <br>
          Input: [0, 1, 0] ‚Üí resultado: 0  <br>
          Input: [1, 0, 0] ‚Üí resultado: 1  <br>
          Input: [1, 1, 0] ‚Üí resultado: 1  <br>
          Input: [1, 1, 1] ‚Üí resultado: 1  <br><br>
          La inteligencia artificial fue capaz de generalizar el patr√≥n correctamente. Al presentarle entradas no vistas previamente, como:<br>
          Input: [0, 1, 1] ‚Üí Oculta: [0.08, 0.67, 0.50] ‚Üí Salida: 0 (confianza: 0.091)  <br>
          Input: [1, 0, 1] ‚Üí Oculta: [0.93, 0.33, 0.50] ‚Üí Salida: 1 (confianza: 0.922)  <br><br>
          la IA respondi√≥ con precisi√≥n y gran confianza.
        </p>
        <p>
        üß† ¬øQu√© significa esto?
        </p>
        <p>
        Aunque el problema puede parecer simple para un humano (basta con fijarse en el primer bit de entrada para predecir el resultado), la red no fue programada expl√≠citamente para eso. En su lugar, la IA fue capaz de descubrir esta regla por s√≠ sola, aprendiendo a trav√©s del entrenamiento.
        </p>
        <p>
          ‚úÖ En resumen, esta demostraci√≥n muestra c√≥mo una red neuronal sencilla, escrita en JavaScript, puede aprender patrones l√≥gicos sin instrucciones expl√≠citas. Es un claro ejemplo del poder del aprendizaje autom√°tico.
        </p>`,
        slug:"Inteligencia-Artificial-en-JavaScript",
        tags: ["Desarrollo", "IA", "JavaScript", "Perceptron"],
        date: "06/04/2025",
        description: `En este art√≠culo, construimos una neurona artificial b√°sica en JavaScript, entendiendo los conceptos clave de pesos, sesgos y funciones de activaci√≥n. Hemos visto que el perceptr√≥n puede aprender por s√≠ solo a partir de datos, sin necesidad de que le demos reglas expl√≠citas. La inteligencia artificial, en su n√∫cleo, es una funci√≥n matem√°tica que transforma entradas en salidas mediante una serie de c√°lculos. En las redes neuronales, esto implica multiplicar cada entrada por un peso, sumar un sesgo y aplicar una funci√≥n de activaci√≥n para obtener una decisi√≥n. A trav√©s del aprendizaje, estos valores se ajustan autom√°ticamente para mejorar la precisi√≥n del modelo.`
    },{
    id: 3,
    title: "IVA ‚Äì herramienta silenciosa",
    preview: "https://suzdalenko-dev.github.io/ia/img/3-0.png",
    content: `
        <h3>C√≥mo el PSOE ‚Äîel partido ‚Äúpro obrero‚Äù‚Äî fue el primero en hacer m√°s pobre al obrero con el IVA</h3>
        <br>
        En 1986, el PSOE, ese mismo partido que se llena la boca con la igualdad y los derechos de los trabajadores, fue el primero en imponer **un nuevo impuesto al consumo: el IVA**. Lo hizo ‚Äúpor Europa‚Äù, dicen. Pero el resultado fue que, de un d√≠a para otro, **todos los espa√±oles pasaron a ser un 11% m√°s pobres**. Porque eso es lo que implica un 11% de IVA: perder poder adquisitivo sin discusi√≥n.  
        <br><br>
        Y desde entonces, lejos de corregirlo o eliminarlo, el PSOE (y tambi√©n el PP) **han subido ese impuesto una y otra vez**, sin verg√ºenza alguna. Todo sea ‚Äîdicen‚Äî por la clase trabajadora. Aunque a la vista est√° qui√©n paga realmente la fiesta.

        <br><br>
        <h3>C√≥mo el IVA se convirti√≥ en una herramienta silenciosa para asfixiar la econom√≠a espa√±ola</h3>
        <br>
        Desde que el IVA se implant√≥, ha sido una fuente estable de recaudaci√≥n... pero tambi√©n una forma silenciosa de apretar el bolsillo del ciudadano com√∫n. 
        <br><br>
        <strong>¬øQu√© ha pasado desde entonces?</strong><br>
        El IVA ha pasado del 12% original a un 21% en la actualidad, con subidas aplicadas tanto por el PSOE como por el PP. Y lo peor es que esas subidas afectan igual al que cobra 1.000 ‚Ç¨ que al que cobra 10.000 ‚Ç¨. Porque el IVA lo pagamos todos... y cuanto menos tienes, m√°s te duele.
        <br><br>
        <img src="https://suzdalenko-dev.github.io/ia/img/3-0.png" alt="Subida del IVA" class="img-fluid" /><br><br>

        <h4>#1. Un impuesto regresivo que castiga a los que menos tienen</h4>
        Mientras los grandes capitales encuentran formas de evadir o aplazar impuestos, el IVA te lo quitan directamente en la caja del supermercado. ¬øCompras leche, luz, transporte o productos b√°sicos? Paga. ¬øTe suben el IVA? No puedes esquivarlo. Es autom√°tico. Es diario.
        <br><br>

        <h4>#2. Una herramienta de recaudaci√≥n f√°cil para gobiernos sin reformas</h4>
        Ning√∫n gobierno ha tenido el valor de revertir una subida de IVA. Es c√≥modo: recaudas m√°s sin tocar a los ricos ni luchar contra el fraude fiscal. Pero eso s√≠, aprietas a quien trabaja, consume y cumple.
        <br><br>

        <h4>#3. ¬øD√≥nde est√°n los servicios a cambio?</h4>
        Pagamos como si vivi√©ramos en Suiza, pero tenemos listas de espera eternas, transporte colapsado y educaci√≥n infrafinanciada. ¬øQu√© hace el Estado con ese IVA? ¬øSe invierte realmente en lo que necesitamos o se pierde entre despachos, cargos p√∫blicos y chiringuitos?
        <br><br>

        <h4>#4. El IVA como s√≠ntoma de una clase pol√≠tica mediocre</h4>
        Subir el IVA ha sido el recurso f√°cil de una pol√≠tica sin ideas. Lo han hecho los socialistas, lo han hecho los populares. ¬øY mientras? La econom√≠a se enfr√≠a, el consumo cae, los aut√≥nomos sufren y el peque√±o comercio cierra.
        <br><br>

        <h4>#5. El coste oculto del IVA: una trituradora de tiempo y dinero para las empresas</h4>
        Si todo esto fuera poco, est√° el coste oculto que nadie menciona: el coste de gestionar el IVA. En Espa√±a, miles de pymes y aut√≥nomos pierden horas y recursos cada trimestre preparando declaraciones, controlando facturas, soportando inspecciones y adapt√°ndose a cambios legislativos constantes.
        <br><br>
        Y cada vez que el gobierno decide cambiar un tipo impositivo, modificar la normativa o lanzar una nueva campa√±a de ‚Äúsimplificaci√≥n fiscal‚Äù, las empresas deben rehacer programas, pagar asesores, reconfigurar sistemas y volver a empezar. Resultado: decenas de millones de euros y horas de trabajo literalmente tiradas a la basura. No se produce m√°s. No se vende m√°s. Solo se mueve papel y se entierra riqueza nacional en burocracia.
        <br><br>

        <img src="https://suzdalenko-dev.github.io/ia/img/3-0.png" alt="Factura con IVA" class="img-fluid" /><br><br>

        <h3>¬øQu√© se podr√≠a hacer?</h3>
        <ul>
          <li>‚úÖ Quitar el IVA de los productos esenciales.</li>
          <li>‚úÖ Devolver parte del IVA a los salarios bajos v√≠a deducciones o compensaciones.</li>
          <li>‚úÖ Combatir el fraude fiscal en serio y no con campa√±as de marketing.</li>
          <li>‚úÖ Hacer una reforma tributaria justa, donde todos paguen lo mismo en proporci√≥n, sin castigar a quien m√°s trabaja o emprende. El esfuerzo no debe penalizarse con m√°s impuestos, sino valorarse. En una econom√≠a sana, el aut√≥nomo y el empresario que tiran del pa√≠s no deber√≠an pagar por encima de su peso, sino tener estabilidad, reglas claras y un Estado que no los trate como enemigos.</li>
        </ul>
        <br>

        <h3>Conclusi√≥n: un pa√≠s que vive del IVA se est√° empobreciendo en silencio</h3>
        <br>
        Porque cada euro que pagas en IVA, es un euro menos que puedes ahorrar, invertir o disfrutar. Y cuando todo sube menos tu sueldo, el IVA no es solo un impuesto... es una forma de hundir la econom√≠a de los que mantienen en pie este pa√≠s.
        <br><br>
        Ya es hora de exigir una fiscalidad que no castigue al trabajador ni al emprendedor. Porque el verdadero progreso no se mide por cu√°nto recauda Hacienda, sino por cu√°nta dignidad y libertad econ√≥mica tiene su gente.
    `,
    slug: "IVA-Espa√±a",
    tags: ["Fiscalidad", "IVA", "Pol√≠tica econ√≥mica"],
    date: "06/05/2025",
    description: "El PSOE, el supuesto defensor del trabajador, fue quien implant√≥ el IVA en Espa√±a, empobreciendo al ciudadano com√∫n desde el primer d√≠a. Este art√≠culo explica c√≥mo este impuesto se ha convertido en una trampa silenciosa contra el consumidor, el aut√≥nomo y la econom√≠a real."
},{
  id: 2,
  title: "Autenticaci√≥n en Django sin librer√≠as externas (sesiones y token firmado HMAC)",
  preview: "https://suzdalenko-dev.github.io/ia/img/2-0.png",
  content: `
  <p><img src="https://suzdalenko-dev.github.io/ia/img/2-0.png" alt="Autenticaci√≥n en Django sin librer√≠as externas" class="img-fluid" loading="lazy" width="1200" height="675"></p>

  <p>
    Aqu√≠ te dejo una gu√≠a completa para implementar autenticaci√≥n en <strong>Django puro</strong>, sin instalar librer√≠as de terceros.
    Te muestro dos enfoques:
  </p>
  <ul>
    <li><strong>A) Sesiones de Django</strong> (lo m√°s simple y seguro por defecto).</li>
    <li><strong>B) Token propio firmado</strong> con <code>django.core.signing</code> (HMAC) para APIs sin estado.</li>
  </ul>

  <h3>üîÅ Flujo general</h3>
  <ol>
    <li>El usuario env√≠a <em>usuario</em> y <em>contrase√±a</em> desde un formulario HTML o fetch.</li>
    <li>El servidor valida con <code>django.contrib.auth.authenticate()</code>.</li>
    <li>Si es correcto:
      <ul>
        <li><strong>Sesiones</strong>: se crea una sesi√≥n y se env√≠a una cookie segura.</li>
        <li><strong>Token</strong>: se genera un token firmado con expiraci√≥n y se devuelve (o se pone en cookie HttpOnly).</li>
      </ul>
    </li>
    <li>Las vistas protegidas verifican que el usuario est√© autenticado (sesi√≥n) o que el token sea v√°lido.</li>
    <li>Logout: se cierra la sesi√≥n o se borra/invalida el token.</li>
  </ol>

  <hr>
  <h2>A) Autenticaci√≥n con <u>Sesiones de Django</u> (recomendada)</h2>

  <div class="vscode-header">settings.py (extracto)</div>
  <div class="vscode-editor"><pre><code class="language-python">INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
]

# Producci√≥n: activa HTTPS y cookies seguras
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
CSRF_TRUSTED_ORIGINS = ["https://tu-dominio.com"]
</code></pre></div>

  <div class="vscode-header">templates/login.html</div>
  <div class="vscode-editor"><pre><code class="language-html">&lt;!doctype html&gt;
&lt;html lang="es"&gt;
&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;Login&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
  &lt;h3&gt;Iniciar sesi√≥n&lt;/h3&gt;
  &lt;form method="post" action="/login/"&gt;
    {% csrf_token %}
    &lt;label&gt;Usuario&lt;/label&gt;
    &lt;input name="username" required&gt;
    &lt;label&gt;Contrase√±a&lt;/label&gt;
    &lt;input name="password" type="password" required&gt;
    &lt;button type="submit"&gt;Entrar&lt;/button&gt;
  &lt;/form&gt;
  {% if form_error %}&lt;p style="color:red"&gt;{{ form_error }}&lt;/p&gt;{% endif %}
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div>

  <div class="vscode-header">urls.py</div>
  <div class="vscode-editor"><pre><code class="language-python">from django.contrib import admin
from django.urls import path
from .views import login_view, logout_view, dashboard

urlpatterns = [
    path("admin/", admin.site.urls),
    path("login/", login_view, name="login"),
    path("logout/", logout_view, name="logout"),
    path("", dashboard, name="dashboard"),
]
</code></pre></div>

  <div class="vscode-header">views.py (sesi√≥n)</div>
  <div class="vscode-editor"><pre><code class="language-python">from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect

def login_view(request):
    if request.method == "GET":
        return render(request, "login.html")

    # POST
    username = request.POST.get("username", "")
    password = request.POST.get("password", "")
    user = authenticate(request, username=username, password=password)

    if user is not None:
        login(request, user)  # crea sesi√≥n y cookie segura
        return redirect("dashboard")
    return render(request, "login.html", {"form_error": "Credenciales inv√°lidas"})

@login_required
def dashboard(request):
    return render(request, "dashboard.html", {"user": request.user})

def logout_view(request):
    logout(request)  # borra la sesi√≥n del servidor
    return redirect("login")
</code></pre></div>

  <p><strong>Notas de seguridad:</strong> Usa HTTPS, mant√©n <code>SECRET_KEY</code> seguro, y deja que Django gestione la cookie de sesi√≥n (HttpOnly + Secure). Las vistas con formularios deben incluir <code>{% csrf_token %}</code>.</p>

  <hr>
  <h2>B) API sin estado con <u>Token firmado (HMAC)</u> usando <code>django.core.signing</code></h2>
  <p>
    Si quieres un flujo tipo ‚ÄúBearer token‚Äù (similar a JWT pero sin librer√≠as externas), Django trae un firmador HMAC:
    <code>TimestampSigner</code> y utilidades para serializar/firmar. Crearemos un token con <em>user_id</em> y un
    <em>exp</em> (expiraci√≥n), lo firmamos con tu <code>SECRET_KEY</code> y lo verificamos en cada petici√≥n.
  </p>

  <div class="vscode-header">core/auth_token.py</div>
  <div class="vscode-editor"><pre><code class="language-python">import json, time, base64, hmac, hashlib
from django.conf import settings
from django.core.signing import TimestampSigner, BadSignature, SignatureExpired
from django.contrib.auth import get_user_model

ALGO = "sha256"
SIGNER_SALT = "my.api.token.v1"  # cambia si rompes compatibilidad
TOKEN_MAX_AGE = 15 * 60          # 15 minutos (access)

def _b64e(b: bytes) -> str:
    return base64.urlsafe_b64encode(b).decode().rstrip("=")

def _b64d(s: str) -> bytes:
    pad = "=" * (-len(s) % 4)
    return base64.urlsafe_b64decode(s + pad)

def make_token(user_id: int, ttl: int = TOKEN_MAX_AGE) -> str:
    payload = {
        "uid": user_id,
        "exp": int(time.time()) + ttl,
        "iat": int(time.time()),
    }
    raw = json.dumps(payload, separators=(",", ":")).encode()
    msg = _b64e(raw)

    signer = TimestampSigner(key=settings.SECRET_KEY, salt=SIGNER_SALT)
    signed = signer.sign(msg)  # msg:signature
    return signed

def check_token(token: str):
    """
    Devuelve instancia de usuario si el token es v√°lido; si no, None.
    """
    signer = TimestampSigner(key=settings.SECRET_KEY, salt=SIGNER_SALT)
    try:
        # TimestampSigner no valida exp propio, valida edad si se pasa max_age en unsign
        msg = signer.unsign(token, max_age=TOKEN_MAX_AGE)
        payload = json.loads(_b64d(msg))
        if payload.get("exp", 0) &lt; int(time.time()):
            return None
        User = get_user_model()
        return User.objects.filter(id=payload.get("uid")).first()
    except (BadSignature, SignatureExpired, json.JSONDecodeError):
        return None
</code></pre></div>

  <div class="vscode-header">middleware.py (autenticaci√≥n por Bearer)</div>
  <div class="vscode-editor"><pre><code class="language-python">from django.utils.deprecation import MiddlewareMixin
from django.contrib.auth.models import AnonymousUser
from .core.auth_token import check_token

class BearerAuthMiddleware(MiddlewareMixin):
    """
    Si encuentra Authorization: Bearer &lt;token&gt;, autentica request.user.
    No sustituye a la sesi√≥n; es compatible.
    """
    def process_request(self, request):
        auth = request.META.get("HTTP_AUTHORIZATION", "")
        if auth.lower().startswith("bearer "):
            token = auth.split(" ", 1)[1].strip()
            user = check_token(token)
            request.user = user or AnonymousUser()
</code></pre></div>

  <div class="vscode-header">settings.py (a√±ade el middleware)</div>
  <div class="vscode-editor"><pre><code class="language-python">MIDDLEWARE = [
    # ...
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "tuapp.middleware.BearerAuthMiddleware",  # despu√©s de AuthenticationMiddleware
]
</code></pre></div>

  <div class="vscode-header">views.py (login API, protected API)</div>
  <div class="vscode-editor"><pre><code class="language-python">from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse, HttpResponseForbidden
from django.contrib.auth import authenticate
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import AnonymousUser
from .core.auth_token import make_token

@csrf_exempt  # si usas fetch desde otro dominio sin cookies. Con cookies, configura CSRF.
def api_login(request):
    if request.method != "POST":
        return JsonResponse({"detail": "M√©todo no permitido"}, status=405)

    import json
    try:
        body = json.loads(request.body or "{}")
    except json.JSONDecodeError:
        body = {}
    user = authenticate(request, username=body.get("username",""), password=body.get("password",""))
    if not user:
        return JsonResponse({"detail": "Credenciales inv√°lidas"}, status=401)

    token = make_token(user.id)
    # Puedes devolver en JSON...
    return JsonResponse({"access": token, "user": {"id": user.id, "username": user.username}})

def api_protected(request):
    if not request.user or isinstance(request.user, AnonymousUser):
        return HttpResponseForbidden("No autenticado")
    return JsonResponse({"ok": True, "user": {"id": request.user.id, "username": request.user.username}})
</code></pre></div>

  <div class="vscode-header">urls.py (API)</div>
  <div class="vscode-editor"><pre><code class="language-python">from django.urls import path
from .views import api_login, api_protected

urlpatterns += [
    path("api/login/", api_login),
    path("api/protected/", api_protected),
]
</code></pre></div>

  <h4>üí° Variante: token en cookie HttpOnly</h4>
  <p>M√°s seguro frente a XSS: en lugar de devolverlo en JSON, lo pones en una cookie HttpOnly + Secure:</p>
  <div class="vscode-editor"><pre><code class="language-python">from django.http import JsonResponse

def api_login_cookie(request):
    # ... valida user con authenticate como arriba ...
    token = make_token(user.id)
    res = JsonResponse({"ok": True})
    res.set_cookie("access", token, httponly=True, secure=True, samesite="Lax", max_age=15*60)
    return res
</code></pre></div>

  <p>En este caso, tu middleware leer√≠a el token desde la cookie si no existe cabecera Authorization.</p>
  <div class="vscode-editor"><pre><code class="language-python">class BearerAuthMiddleware(MiddlewareMixin):
    def process_request(self, request):
        token = None
        auth = request.META.get("HTTP_AUTHORIZATION", "")
        if auth.lower().startswith("bearer "):
            token = auth.split(" ", 1)[1].strip()
        elif "access" in request.COOKIES:
            token = request.COOKIES.get("access")

        from django.contrib.auth.models import AnonymousUser
        from .core.auth_token import check_token
        user = check_token(token) if token else None
        request.user = user or AnonymousUser()
</code></pre></div>

  <h3>üß™ HTML de ejemplo (formulario + fetch)</h3>
  <div class="vscode-editor"><pre><code class="language-html">&lt;!doctype html&gt;
&lt;html lang="es"&gt;
&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;Login API Token&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
  &lt;form id="f"&gt;
    &lt;input name="username" placeholder="usuario" required&gt;
    &lt;input name="password" type="password" placeholder="contrase√±a" required&gt;
    &lt;button&gt;Entrar&lt;/button&gt;
  &lt;/form&gt;

  &lt;pre id="out"&gt;&lt;/pre&gt;

  &lt;script&gt;
    const out = document.querySelector('#out');
    let accessToken = null;

    document.querySelector('#f').addEventListener('submit', async (e) =&gt; {
      e.preventDefault();
      const fd = new FormData(e.target);
      const body = JSON.stringify({ username: fd.get('username'), password: fd.get('password') });

      const r = await fetch('/api/login/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body
      });
      const j = await r.json();
      if (r.ok) {
        accessToken = j.access; // si usas cookie HttpOnly, no guardes nada aqu√≠
        out.textContent = 'Login OK. Token guardado en memoria.';
      } else {
        out.textContent = 'Error: ' + (j.detail || r.status);
      }
    });

    async function callProtected() {
      const r = await fetch('/api/protected/', {
        headers: accessToken ? { 'Authorization': 'Bearer ' + accessToken } : {}
      });
      out.textContent = await r.text();
    }
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div>

  <h3>üö™ Logout</h3>
  <ul>
    <li><strong>Sesi√≥n</strong>: llama a <code>logout(request)</code> y redirige.</li>
    <li><strong>Token</strong>:
      <ul>
        <li>Si es en <em>header</em>, basta con que el cliente lo olvide (y usas expiraci√≥n corta).</li>
        <li>Si es en <em>cookie</em>, env√≠a una cookie vac√≠a con <code>max_age=0</code> para borrarla.</li>
      </ul>
    </li>
  </ul>

  <div class="vscode-editor"><pre><code class="language-python">from django.http import JsonResponse

def api_logout_cookie(request):
    res = JsonResponse({"ok": True})
    res.delete_cookie("access")
    return res
</code></pre></div>

  <h3>üîê Buenas pr√°cticas</h3>
  <ul>
    <li>Siempre HTTPS.</li>
    <li>Tokens de vida corta (p.ej. 15 min). Para ‚Äúrefresh‚Äù podr√≠as emitir un segundo token con vida m√°s larga y endpoint para renovarlo (mismo mecanismo de firma).</li>
    <li>Si necesitas revocaci√≥n inmediata de tokens (lista negra), guarda un <em>jti</em> (id √∫nico) en BD al hacer logout y compru√©balo en <code>check_token</code>.</li>
    <li>No guardes tokens en <code>localStorage</code> si puedes evitarlo. Mejor cookie HttpOnly o memoria (mientras dure la pesta√±a).</li>
  </ul>

  <p><em>Conclusi√≥n:</em> con las <strong>sesiones</strong> de Django tienes autenticaci√≥n robusta sin dependencias. Si necesitas una API sin estado, el <strong>token firmado con HMAC</strong> usando <code>django.core.signing</code> te da una alternativa ligera y totalmente ‚Äúsin librer√≠as externas‚Äù.</p>
  `,
  slug: "autenticacion-django-sin-librerias",
  tags: ["Python","Django","Autenticaci√≥n","Sin librer√≠as"],
  date: "13/09/2025",
  description: "C√≥mo implementar autenticaci√≥n en Django sin librer√≠as externas: sesiones cl√°sicas y un token propio firmado (HMAC) con django.core.signing. C√≥digo listo, HTML y flujo completo."
}


];

content = content.reverse();

window.content = content;
